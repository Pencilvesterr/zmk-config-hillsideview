#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/studio_unlock.dtsi>

// Left bottom row pinky 2nd column

#ifndef LB5

#define LB5 24

#endif

// Right bottom row pinky 2nd column
#ifndef RB5

#define RB5 35

#endif

// #define DEF 0
// #define SYM 1
// #define NUM 2
// #define ADJ 3
// #define QUICK_TAP_MS 175
// #define TAPPING_TERM_MS 150
// &sk {
//     release-after-ms = <600>;
//     quick-release;
// };
// / {
//     /* assign `input-listener` to all pointing devices */
//     /* &glidepoint0 on central, &glidepoint1 on peripheral */
//     tpad_central_listener {
//         compatible = "zmk,input-behavior-listener";
//         device = <&glidepoint0>;
//         y-invert;
//         scale-multiplier = <2>;
//         // xy-swap;
//         // x-invert;
//     };
//     tpad_peripheral_listener {
//         compatible = "zmk,input-behavior-listener";
//         device = <&glidepoint1>;
//         layers = <DEF SYM ADJ>;
//         y-invert;
//         scale-multiplier = <2>;
//         /* NOTE: do NOT override event code here, */
//         /*       let Cirque glidepoint reports click from taps */
//         // evt-type = <INPUT_EV_REL>;
//         // x-input-code = <INPUT_REL_X>;
//         // y-input-code = <INPUT_REL_Y>;
//     };
//     tpad_peripheral_scroll {
//         compatible = "zmk,input-behavior-listener";
//         device = <&glidepoint1>;
//         layers = <NUM>;
//         /* NOTE: only apply input-code overriding for INPUT_EV_REL */
//         evt-type = <INPUT_EV_REL>;
//         x-input-code = <INPUT_REL_MISC>;
//         y-input-code = <INPUT_REL_WHEEL>;
//         bindings = <&ib_wheel_scaler 1 8>;
//     };
//     ib_wheel_scaler: ib_wheel_scaler {
//         compatible = "zmk,input-behavior-scaler";
//         #binding-cells = <2>;
//         evt-type = <INPUT_EV_REL>;
//         input-code = <INPUT_REL_WHEEL>;
//     };
// };
// / {
//     conditional_layers {
//         compatible = "zmk,conditional-layers";
//         tri_layer {
//             if-layers = <SYM NUM>;
//             then-layer = <ADJ>;
//         };
//     };
//     combos {
//         compatible = "zmk,combos";
//         caps {
//             timeout-ms = <50>;
//             key-positions = <LB5 RB5>;
//             bindings = <&caps_word>;
//         };
//     };
//     behaviors {
//         lq: layer_toggle_quick {
//             compatible = "zmk,behavior-hold-tap";
//             #binding-cells = <2>;
//             flavor = "tap-preferred";
//             tapping-term-ms = <TAPPING_TERM_MS>;
//             quick-tap-ms = <QUICK_TAP_MS>;
//             bindings = <&mo>, <&kp>;
//         };
//         ht: hold_tap {
//             compatible = "zmk,behavior-hold-tap";
//             #binding-cells = <2>;
//             tapping-term-ms = <200>;
//             quick-tap-ms = <175>;
//             flavor = "tap-preferred";
//             bindings = <&kp>, <&kp>;
//             label = "Hold Tap";
//         };
//         htb: hold_tap_balanced {
//             compatible = "zmk,behavior-hold-tap";
//             label = "Hold Tab Balanced";
//             bindings = <&kp>, <&kp>;
//             #binding-cells = <2>;
//             tapping-term-ms = <200>;
//             quick-tap-ms = <175>;
//             flavor = "balanced";
//         };
//     };
//     keymap {
//         compatible = "zmk,keymap";
//         default_layer {
//             display-name = "Default";
//             bindings = <
// &ht GRAVE TAB  &ht N1 Q     &ht N2 W    &ht N3 E      &ht N4 R       &ht N5 T      &ht N6 Y  &ht N7 U       &ht N8 I     &ht N9 O    &ht N0 P        &kp PIPE
// &kp ESC        &ht LCTRL A  &ht LALT S  &ht LGUI D    &htb LSHIFT F  &kp G         &kp H     &htb LSHIFT J  &ht LGUI K   &ht LALT L  &ht LCTRL SEMI  &kp SQT
// &sk LSHFT      &kp Z        &kp X       &kp C         &kp V          &kp B         &kp N     &kp M          &kp COMMA    &kp DOT     &kp FSLH        &sk RSHFT
//                                         &kp END                                                             &kp C_PP
//                &kp LGUI     &kp SPACE   &lq SYM BSPC  &sk LEFT_ALT                           &sk RIGHT_ALT  &lq NUM DEL  &kp RET     &kp RGUI
//             >;
//             sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
//         };
//         sym_layer {
//             display-name = "Symbols";
//             bindings = <
// &trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT      &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
// &trans  &trans    &trans  &trans    &trans    &trans         &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
// &trans  &trans    &trans  &trans    &trans    &trans         &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
//                           &kp END                                                  &kp C_PP
//         &trans    &trans  &trans    &trans                              &trans     &trans           &trans    &trans
//             >;
//             sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp C_NEXT C_PREV>;
//         };
//         num_layer {
//             display-name = "Numbers";
//             bindings = <
// &kp TAB  &ht F1 N1  &ht F2 N2  &ht F3 N3  &ht F4 N4  &ht F5 N5      &ht F6 N6  &ht F7 N7  &ht F8 N8  &ht F9 N9  &ht F10 N0  &trans
// &trans   &trans     &trans     &trans     &trans     &trans         &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans      &trans
// &trans   &trans     &trans     &trans     &trans     &trans         &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans      &trans
//                                &trans                                                     &trans
//          &trans     &trans     &trans     &trans                               &trans     &trans     &trans     &trans
//             >;
//             sensor-bindings = <&inc_dec_kp HOME END &inc_dec_kp C_NEXT C_PREV>;
//         };
//         adj_layer {
//             display-name = "Adjust";
//             bindings = <
// &bootloader  &rgb_ug RGB_TOG    &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI      &out OUT_TOG    &trans    &trans      &trans        &trans      &bootloader
// &sys_reset   &rgb_ug RGB_EFF    &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD      &studio_unlock  &trans    &trans      &trans        &trans      &sys_reset
// &bt BT_CLR   &bt BT_SEL 0       &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4         &kp C_PREV      &kp C_PP  &kp C_NEXT  &kp C_VOL_UP  &kp C_MUTE  &kp C_VOL_DN
//                                                  &trans                                                                           &trans
//              &ext_power EP_TOG  &trans           &trans           &trans                                                &trans    &trans      &trans        &trans
//             >;
//             // F15 and F14 are brightness controls for macOS
//             sensor-bindings = <&inc_dec_kp F15 F14 &inc_dec_kp PG_UP PG_DN>;
//         };
//     };
// };

#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49 55 56 57 43 54 53 52 51 41 42 40 39 38>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <70>;
            quick-tap-ms = <180>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 55 43 44 45>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <70>;
            quick-tap-ms = <180>;
        };

        tm: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49>;
            label = "THUMB_MODS";
            quick-tap-ms = <260>;
        };

        hml_shift: hml_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49 55 56 57 43 54 53>;
            flavor = "balanced";
            quick-tap-ms = <180>;
            hold-trigger-on-release;
        };

        hmr_shift: hmr_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54>;
            flavor = "balanced";
            quick-tap-ms = <180>;
            hold-trigger-on-release;
        };

        caps_word_or_layer: caps_word_or_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_OR_LAYER";
            bindings = <&mo>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        tm_hold_press: tm_hold_press {
            compatible = "zmk,behavior-hold-tap";
            label = "TM_HOLD_PRESS";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            hold-while-undecided;
            hold-trigger-key-positions = <0 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 1 2 4 3 5 6 7 8 9 11>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp TAB         &kp Q         &kp W            &kp E                 &kp R                    &kp T      &kp Y  &kp U                     &kp I                   &kp O             &kp P            &kp RG(C)
&kp ESCAPE      &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_GUI D       &hml_shift LEFT_SHIFT F  &kp G      &kp H  &hmr_shift RIGHT_SHIFT J  &hmr RIGHT_GUI K        &hmr RIGHT_ALT L  &hmr RCTRL SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z         &kp X            &kp C                 &kp V                    &kp B      &kp N  &kp M                     &kp COMMA               &kp DOT           &kp FSLH         &kp RG(V)
                                               &kp HOME                                                                                   &kp END
                &kp DEL       &tm 2 BACKSPACE  &tm_hold_press 1 TAB  &kp LS(LA(LC(LG(P))))                      &trans                    &tm_hold_press 1 ENTER  &tm 2 SPACE       &caps_word
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        Symbols {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans     &kp EXCLAMATION             &kp AT_SIGN             &kp HASH                &kp DOLLAR                      &kp PERCENT      &kp CARET  &kp AMPERSAND                        &kp ASTERISK                  &kp LEFT_BRACE                   &kp RIGHT_BRACE                       &kp TILDE
&kp TILDE  &hml LEFT_CONTROL NUMBER_1  &hml LEFT_ALT NUMBER_2  &hml LEFT_GUI NUMBER_3  &hml_shift LEFT_SHIFT NUMBER_4  &kp N5           &kp EQUAL  &hmr_shift RIGHT_SHIFT LEFT_BRACKET  &hmr RIGHT_GUI RIGHT_BRACKET  &hmr RIGHT_ALT LEFT_PARENTHESIS  &hmr RIGHT_CONTROL RIGHT_PARENTHESIS  &kp GRAVE
&trans     &kp NUMBER_6                &kp N7                  &kp N8                  &kp N9                          &kp N0           &kp UNDER  &kp MINUS                            &kp PLUS                      &kp BACKSLASH                    &kp PIPE                              &trans
                                                               &trans                                                                                                                   &trans
           &trans                      &trans                  &trans                  &kp C_PLAY_PAUSE                                            &trans                               &trans                        &trans                           &trans
            >;
        };

        Arrows+BT {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp F11     &kp F1            &kp F2                &kp F3                      &kp F4                       &kp F5                &kp F6          &hmr RIGHT_SHIFT F7  &hmr RIGHT_COMMAND F8  &hmr RIGHT_ALT F9  &hmr RIGHT_CONTROL F10  &kp F12
&trans      &kp LEFT_CONTROL  &hml LEFT_ALT C_PREV  &hml LEFT_COMMAND C_VOL_DN  &hml LEFT_SHIFT C_VOLUME_UP  &kp C_NEXT            &kp LEFT        &kp DOWN             &kp UP_ARROW           &kp RIGHT          &trans                  &trans
&bt BT_PRV  &bt BT_NXT        &bt BT_CLR            &trans                      &trans                       &kp C_PLAY_PAUSE      &msc SCRL_LEFT  &msc SCRL_UP         &msc SCRL_DOWN         &msc SCRL_RIGHT    &trans                  &trans
                                                    &trans                                                                                                              &trans
            &trans            &trans                &trans                      &trans                                                             &trans               &trans                 &trans             &trans
            >;
        };
    };
};
